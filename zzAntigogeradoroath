# Antigo gerador de OATH'S
'''
# SER√Å SUBSTITUIDO POR GERAR_OATHS, USAREI UMA FUN√á√ÉO SEPARADA SO PARA GERAR OS OATHS
# EM VEZ DE UMA FUN√á√ÉO QUE COLETE OS DADOS, GERE E EXIBA, IREI SEPARAR ESSE PROCESSO CADA
# UM SEM SUA DETERMINADA FUN√á√ÉO:
# N√ÉO IREI APAGAR ESSE ARQUIVO. USAREI COMO UM BACKUP PARA CASO DE MERDA NA NOVA FUNCIONALIDADE

# Importa√ß√µes de bibliotecas:
import os
import time
import random
# Importa√ß√µes gerais:
from Gerar_Nomes import Gerar_Nomes_Random
from Regras_dados import Tiercomum, Tierslenda
from Evolucao_Oath import evo_oath
from Probabilidades import valores, peso, valoreslend, pesolend, limite_maxatri, limite_minatri
from Dados_importantes import vantagens, estilos, tipos

# Fun√ß√µes √öteis:
def limpar():
    if os.name == 'nt':  # Windows
        os.system('cls')

# Gera√ß√£o de Oath's Lend√°rios:
def Gerar_Lend():
    
    limite = 0
    tier = 0
    lendario = {'For√ßa': 0, 'Destreza': 0, 'Poder M√°gico': 0, 'Durabilidade': 0, 'Foco': 0}

    # Converte as chaves dos dicion√°rios em LISTA para sorteio com random.choice:
    vant = list(vantagens.keys())
    est = list(estilos.keys())
    
    # Amostragem:
    limpar()
    print("=" * 50)
    print("üîÆ Bem-vindo ao Gerador de Oaths Lendarios! üîÆ")
    print("=" * 50)
    Tierslenda()
    
    while True:
    # Usu√°rio ir√° escolher agora dentro da fun√ß√£o Gerar_Oath se quer eles aleat√≥rios ou fixos.
        print("=" * 50)
        print("1. üîÆ Gerador Aleat√≥rio! üîÆ")
        print("2. üîÆ Gerador Espec√≠fico! üîÆ")
        print("=" * 50)

        try:
            e = int(input(">>> "))

            # Fazendo tratamento para caso a escolha do usu√°rio seja incorreta:
            if e < 1 or e > 2:
                print("Op√ß√£o inv√°lida! Digite uma op√ß√£o v√°lida!")
                input("Precione ENTER para voltar para o menu ...")
                limpar()
                continue  

            # Op√ß√£o de gera√ß√£o aleat√≥ria:
            if e == 1:
                while True:
                    try:
                        limite = int(input("‚ú® Quantos Oath's lendarios voc√™ gostaria de gerar? (Digite um n√∫mero) --> "))
                        break
                    except ValueError:
                        print("Valor inv√°lido! Digite uma op√ß√£o v√°lida!")

            # Op√ß√£o de gera√ß√£o espec√≠fica:
            elif e == 2:
                while True:
                    try:
                        tier = int(input("\nQual o tier do Oath Lendario que voc√™ quer gerar? Ex.: 1 seria Branco --> "))
                        limite = int(input("‚ú® Quantos Oath's voc√™ gostaria de gerar? (Digite um n√∫mero) --> "))
                        break
                    except ValueError:
                        print("Valor inv√°lido! Digite uma op√ß√£o v√°lida!")

            break

        except ValueError:
            print("Entrada inv√°lida! Por favor, digite um n√∫mero.")
            limpar()

    
    # Inicio:
    for comeco in range(limite):
        
        # Caso tenha escolhido 1 la em cima:
        if e == 1:
            tier = random.randint(6,8)
        
        # Sorteia uma vantagem, uma natureza e um tipo para o Oath:
        vantsort = random.choice(vant)
        estsort = random.choice(est)
        tiposort = random.choice(tipos)
        
        # Sorteia se √© ou n√£o √© Shiny (em, h√£m? √© ou n√£o √©?):
        if random.random() < 0.05:
            shiny = 1
        else:
            shiny = 0

        # Sorteia tipos adicionais com 40% de chance:
        if random.random() < 0.4:
            restypes = [tipo for tipo in tipos if tipo != tiposort]
            # Corrigindo para que ele n√£o escolha um tipo que o Oath j√° tenha:
            sectipos = random.choice(restypes) if restypes else None 
        # Caso o sorteio nao der os 40% ele aderir valor Nulo a sectipos:
        else:
            sectipos = None
            
        # Definindo os atributos de forma aleatoria do Tier do Oath escolhido:
        for lendatri in lendario.keys():
            dado = random.choices(valoreslend[tier], pesolend[tier])[0]
            lendario[lendatri] = dado

        # Define os Pv's baseados no Tier:
        if tier == 6:
            Pv = random.randint(6,7)
        elif tier == 7:
            Pv = random.randint(6,8)
        else:
            Pv = random.randint(7,9)
            
        # Define os pontos de vida totais do Oath Lend√°rio:
        Pvtotal = Pv + lendario["Durabilidade"]
        
        nome, sexo = Gerar_Nomes_Random()
        
        # Exibi√ß√£o do Oath lend√°rio:
        print("=" * 50)
        print(f"üåü Resultado da Gera√ß√£o do Oath {comeco+1} üåü")
        print("=" * 50)
        print(f"üåüNome: {nome}üåü")
        print(F"‚öß Sexo: {sexo}")
        print(f"üéØ Seu TIER foi: {tier}")
        print("=" * 50)
        print("‚ú® Atributos do Oath:")
        print("=" * 50)
        
        # Caso o Oath sej√° shiny:
        if shiny == 1:
            print("üåü‚ú®üåü‚ú® Seu Oath √© um Shiny üåü‚ú®üåü‚ú®")
            print("=" * 50)
            Pvtotal+=1
        
        #Exibi√ß√£o dos Atributos:
        for nm in lendario:
            distribuido = '‚Ä¢' * lendario[nm]
            print(f"üîπ {nm}: {distribuido}")
        
        # Demonstra os dados restantes (Pv's, Tipos, Natureza e Vantagens):
        if shiny == 0:
            print(F"‚ù§Ô∏è Pontos de Vida ‚ù§Ô∏è : {Pvtotal} = {Pv} + {lendario['Durabilidade']}")
        else: # Caso seja shiny recebe esses dados adicionais:
            print(F"‚ù§Ô∏è Pontos de Vida ‚ù§Ô∏è : {Pvtotal} = {Pv} + {lendario['Durabilidade']} + 1 (Shinys recebem este adicional!)")
        
        print(F"Def. Fisica üõ°Ô∏èüõ°Ô∏è : {lendario['Durabilidade']}")
        print(F"Def. M√°gica ‚ú®üõ°Ô∏è : {lendario['Foco']}")
        
        print("üéØ Vantagens üéØ")
        print(F"{vantsort}: {vantagens[vantsort]}")
        
        print("üî•üíßüåøTipoüåøüíßüî•")
        print(F"Tipagem: {tiposort}", end=" ")
        if sectipos:
            print(F" e {sectipos}")
        else:
            print()
        
        print("‚öîÔ∏è  Estilo de Combate  ‚öîÔ∏è")
        print(F"{estsort}: {estilos[estsort]}")
        print("\n" + "=" * 50 + "\n")

        #Garante que o shiny caso seja sorteado resete seu resultado para o pr√≥ximo sorteio:
        shiny = 0
    return tier

# Gera√ß√£o de Oath's Comuns:
def Gerar_Oath():
    
    # Variaveis:
    limite = 0
    tier = 0
    atri = {'For√ßa': 0, 'Destreza': 0, 'Poder M√°gico': 0, 'Durabilidade': 0, 'Foco': 0}
    maxatri = {'For√ßa': 0, 'Destreza': 0, 'Poder M√°gico': 0, 'Durabilidade': 0, 'Foco': 0}
    e = 0
    
    # Converte as chaves dos dicion√°rios em LISTA para sorteio com random.choice:
    vant = list(vantagens.keys())
    est = list(estilos.keys())
    
    # Amostragem:
    limpar()
    print("=" * 50)
    print("üîÆ Bem-vindo ao Gerador de Oaths! üîÆ")
    print("=" * 50)
    print("\n")
    Tiercomum()
    
    while True:
    # Usu√°rio ir√° escolher agora dentro da fun√ß√£o Gerar_Oath se quer eles aleat√≥rios ou fixos.
        print("=" * 50)
        print("1. üîÆ Gerador Aleat√≥rio! üîÆ")
        print("2. üîÆ Gerador Espec√≠fico! üîÆ")
        print("=" * 50)

        try:
            e = int(input(">>> "))

            # Fazendo tratamento para caso a escolha do usu√°rio seja incorreta:
            if e < 1 or e > 2:
                print("Op√ß√£o inv√°lida! Digite uma op√ß√£o v√°lida!")
                input("Precione ENTER para voltar para o menu ...")
                limpar()
                continue  

            # Op√ß√£o de gera√ß√£o aleat√≥ria:
            if e == 1:
                while True:
                    try:
                        limite = int(input("‚ú® Quantos Oath's voc√™ gostaria de gerar? (Digite um n√∫mero) --> "))
                        break
                    except ValueError:
                        print("Valor inv√°lido! Digite uma op√ß√£o v√°lida!")

            # Op√ß√£o de gera√ß√£o espec√≠fica:
            elif e == 2:
                while True:
                    try:
                        tier = int(input("\nQual o tier do oath que voc√™ quer gerar? Ex.: 1 seria Branco --> "))
                        limite = int(input("‚ú® Quantos Oath's voc√™ gostaria de gerar? (Digite um n√∫mero) --> "))
                        break
                    except ValueError:
                        print("Valor inv√°lido! Digite uma op√ß√£o v√°lida!")

            break

        except ValueError:
            print("Digita√ß√£o inv√°lida! Por favor, digite corretamente!")
            time.sleep(1)
            limpar()

    # Inicio:
    for comeco in range(limite):
        
        # Caso tenha escolhido aleatorio l√° em cima:
        if e == 1:
            tier = random.randint(1,5)
        
        # Sorteia uma vantagem, uma natureza e um tipo para o Oath:
        vantsort = random.choice(vant)
        estsort = random.choice(est)
        tiposort = random.choice(tipos)
        
        # Sorteia se √© ou n√£o √© Shiny (em, h√£m? √© ou n√£o √©?):
        if random.random() < 0.05:
            shiny = 1
        else:
            shiny = 0

        # Sorteia tipos adicionais com 40% de chance:
        if random.random() < 0.4:
            restypes = [tipo for tipo in tipos if tipo != tiposort]
            # Corrigindo para que ele n√£o escolha um tipo que o Oath j√° tenha:
            sectipos = random.choice(restypes) if restypes else None 
        # Caso o sorteio nao der os 40% ele aderir valor Nulo a sectipos:
        else:
            sectipos = None
            
        # Definindo os atributos maximos de forma aleatoria do Tier do Oath escolhido:
        while True:
            soma=0
            for attr in maxatri.keys():
                dado = random.choices(valores[tier], peso[tier])[0]
                maxatri[attr] = dado
                soma += maxatri[attr]
            total = soma # Salva para mostrar o total de pontos no final.
            # Tratamento fazendo os Oaths n√£o passarem do limite para nao ter Oath's com varios atributos altos:
            if limite_minatri[tier] <= soma <= limite_maxatri[tier]:
                break
            
        # Distribui√ß√£o dos Atributos, com tratamento para determinados valores:
        for attr in maxatri:
            if maxatri[attr] == 4:
                atri[attr] = 2
            elif maxatri[attr] == 7:
                atri[attr] = 3
            elif maxatri[attr] == 8:
                atri[attr] = 4
            elif maxatri[attr] == 9:
                atri[attr] = 5
            else:
                atri[attr] = max(maxatri[attr] - 3, 1)

        # Define os Pv's baseados no Tier:
        if tier == 1:
            Pv = random.randint(2, 3)
        elif tier == 2:
            Pv = random.randint(3, 4)
        elif tier == 3:
            Pv = random.randint(3, 4)
        elif tier == 4:
            Pv = random.randint(4, 5)
        else:
            Pv = random.randint(5, 6)
        
        # Define os Pontos de Vida totais do Oath:
        Pvtotal = Pv + atri['Durabilidade']
        
        # Pegando o nome e o sexo do oath da fun√ß√£o Gerar_Nomes_Random:
        nome, sexo = Gerar_Nomes_Random()
       
        # Exibi√ß√£o do Oath:
        print("=" * 50)
        print(f"üåü Resultado da Gera√ß√£o do Oath {comeco+1} üåü")
        print("=" * 50)
        print(f"üåüNome: {nome}üåü")
        print(F"‚öß Sexo: {sexo}")
        print(f"üéØ Seu TIER foi: {tier}\nTotal de Pontos: {total}")
        print("=" * 50)
        print("‚ú® Atributos do Oath:")
        print("=" * 50)
        
        # Caso o Oath sej√° shiny:
        if shiny == 1:
            print("üåü‚ú®üåü‚ú® Seu Oath √© um Shiny üåü‚ú®üåü‚ú®")
            print("=" * 50)
            Pvtotal+=1
        
        # Demonstra os atributos dos Oath's em bolinhas:
        for nm in maxatri:
            distribuido = '‚Ä¢' * atri[nm]
            distribuir = 'o' * (maxatri[nm] - atri[nm]) 
            print(f"üîπ {nm}: {distribuido}{distribuir}")
               
        # Demonstra os dados restantes (Pv's, Tipos, Natureza e Vantagens):
        if shiny == 0:
            print(F"‚ù§Ô∏è Pontos de Vida ‚ù§Ô∏è : {Pvtotal} = {Pv} + {atri['Durabilidade']}")
        else: # Caso seja shiny recebe esses dados adicionais:
            print(F"‚ù§Ô∏è Pontos de Vida ‚ù§Ô∏è : {Pvtotal} = {Pv} + {atri['Durabilidade']} + 1 (Shinys recebem este adicional!)")
        # Adicionar aqui >>> Amostragem dos PM's (Pontos de Magia)
        print(F"Def. Fisica üõ°Ô∏èüõ°Ô∏è : {atri['Durabilidade']}")
        print(F"Def. M√°gica ‚ú®üõ°Ô∏è : {atri['Foco']}")
        print("üéØ Vantagens üéØ")
        print(F"{vantsort}: {vantagens[vantsort]}")
        print("üî•üíßüåøTipoüåøüíßüî•")
        print(F"Tipagem: {tiposort}", end=" ")
        if sectipos:
            print(F" e {sectipos}")
        else:
            print()
        print("‚öîÔ∏è  Estilo de Combate  ‚öîÔ∏è")
        print(F"{estsort}: {estilos[estsort]}")
        print("\n" + "=" * 50 + "\n")
        
        #Garante que o shiny caso seja sorteado resete seu resultado para o pr√≥ximo sorteio:
        shiny = 0
    return tier, maxatri, Pvtotal
'''