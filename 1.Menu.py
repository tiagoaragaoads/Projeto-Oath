# Aqui √© a √°rea principal do c√≥digo, onde ter√° apenas as importa√ß√µes para chamar cada
# fun√ß√£o necess√°ria.

# Importa√ß√µes de biblioteca:
import os

# Importando as fun√ß√µes:
from Exibir_Oaths import exibir_lendario, exibir_comum
from Coleta_dados import coleta_dados, coleta_dados_lendario
from Gerar_Oaths import gerar_oath, gerar_oath_lendario
from Evolucao_Oath import evo_oath
from Abrir_Boosters import starter_booster
from Regras_dados import Tierslenda, Tiercomum
from Dados_importantes import exibir_ficha_jogador, ficha_jogadorAT, ficha_jogadorMX
from Gerar_Nomes import Gerar_Nomes_Random

# Limpando a tela:
def limpar():
    os.system('cls')

# Chamando as vari√°veis:
esc = 0

while True: # Loop Infinito:
    
    # Exibi√ß√£o do Menu:
    print("===================================")
    print("        üåü Menu Principal üåü      ")
    print("===================================")
    print("1. ‚ú® Gerar Oath's ‚ú®")
    print("2. üé¥ Abrir Boosters üé¥")
    print("3. üìú Regras üìú")
    print("4. ‚ùå Sair ‚ùå ")
    print("===================================")

    # Intera√ß√£o para decis√£o do usu√°rio:
    esc = int(input("Escolha a op√ß√£o desejada: "))
    # Limpar tela ap√≥s escolha:
    limpar()
    
    # Escolha 1: Gerar Oath's;
    if esc == 1:
        # Exibi√ß√£o de menu:
        print("===================================")
        print("       üåü Menu de Gera√ß√£o üåü      ")
        print("===================================")
        print("1. ‚ú® Gerar Oath's Comuns ‚ú®")
        print("2. üåü Gerar Oath's Lend√°rios üåü")
        print("===================================")
        
        # Intera√ß√£o para decis√£o do usu√°rio:
        esc = int(input("Escolha a op√ß√£o desejada: "))
        limpar()
        
        # Escolha 1: Gerando Comuns:
        if esc == 1:
            # Executando a fun√ß√£o de coleta de dados e descompactando:
            tier, limite, escolha = coleta_dados()
            # Passando os dados para gerar_oath:
            oath_comum = gerar_oath(tier, limite, escolha)
            # Passando os dados dos Oath's gerados para evolu√ß√£o:
            # como a fun√ß√£o evo_oath espera apenas um dicionario(oath) de cada vez, eu descompacto
            # utilizando um for para ela enviar apenas um oath e exibir um oath por vez.
            for oath in oath_comum:
                evolucao = evo_oath(oath)
                # Finalizando agora com a exibi√ß√£o dos oaths gerados e suas evolu√ß√µes:
                exibir_comum(oath, evolucao)
            # Voltar ao menu e limpar tela:
            input("Precione ENTER para voltar ao menu ...")
            limpar()
        
        # Escolha 2: Gerar Lend√°rio.
        elif esc == 2:
            # Executando a fun√ß√£o de coleta de dados e descompactando:
            tier, limite, escolha = coleta_dados_lendario()
            # Passando os dados para gerar o oath lendario:
            oaths_lendarios = gerar_oath_lendario(tier, limite, escolha)
            # Agora finalizando realizando a exibi√ß√£o:
            for oath in oaths_lendarios:
                exibir_lendario(oath)
                print("\n")
            # Pausa o programa para dar tempo do usu√°rio ver os Oath's Gerados:
            input("Precione ENTER para voltar ao menu ...")
            limpar()
        else:
            print("escolha incorreta, teste novamente")
        
    
    # Escolha 2: Abrir Boosters; AINDA N√ÉO EST√Å IMPLEMENTADO;
    elif esc == 2:
        # Executando a fun√ß√£o de coleta de dados e descompactando:
        tier, limite, escolha = starter_booster()
        # Passando os dados para gerar_oath:
        oath_comum = gerar_oath(tier, limite, escolha)
        # Passando os dados dos Oath's gerados para evolu√ß√£o:
        # como a fun√ß√£o evo_oath espera apenas um dicionario(oath) de cada vez, eu descompacto
        # utilizando um for para ela enviar apenas um oath e exibir um oath por vez.
        for oath in oath_comum:
            evolucao = evo_oath(oath)
            # Finalizando agora com a exibi√ß√£o dos oaths gerados e suas evolu√ß√µes:
            exibir_comum(oath, evolucao)
        # Voltar ao menu:
        input("Precione ENTER para voltar ao menu ...")
        limpar()
    
    # Escolha 5: Teste de Gera√ß√£o de nomes: N√ÉO CONSTA NO MENU;
    elif esc == 5:
        # Quantidade de nomes que ser√° gerado:
        esc = int(input("Quantos nomes voc√™ deseja gerar? >>> "))
        cont = 0
        # Gera a quantidade de nomes:
        for i in range(esc):
            # Fun√ßao que esta em Gerar_Nomes:
            nome, sexo = Gerar_Nomes_Random() # Fun√ß√£o que gera os nomes.
            # Variavel que guarda quantos nomes foram gerados:
            cont += 1
            # Exibe os nomes:
            print(f"{cont}: {nome} ({sexo})")
        # Voltar ao menu:
        input("Precione ENTER para voltar ao menu ...")
        limpar()